#!/usr/bin/env python3

###########################################################################
# Builds a local copy of the FAC database
#
# Last revision: 08/10/2017
#
# Authors:
#   P. Kevin Bohan <votiputox@gmail.com>
#   Marc Joffe <marc@publicsectorcredit.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################

import ODNR
import argparse
import datetime


##########
# Globals
##########

date_format = '%Y-%m-%d'
fac_epoch   = '2010-01-01'
today       = datetime.datetime.today()


####################
# Set some defaults
####################

target_url = 'https://harvester.census.gov/facdissem/SearchA133.aspx'
target_dir = '.'
timeout    = 10


###########################
# Configure the CLI Parser
###########################

parser = argparse.ArgumentParser(description='FAC Repository Builder', add_help=True)

# Be quiet (suppress all output)
parser.add_argument('-q',
                    '--quiet',
                    action='store_true',
                    default=False,
                    help="Suppress all output (suitable for cron)")

# Set the start date
parser.add_argument('-s',
                    '--start',
                    action='store',
                    default=fac_epoch,
                    help='The start date, in format YYYY-MM-DD')

# Set the end date
parser.add_argument('-e',
                    '--end',
                    action='store',
                    default=today.strftime(date_format),
                    help='The end date, in format YYYY-MM-DD')

# Set the target directory for PDF storage
parser.add_argument('-d',
                    '--dir',
                    action='store',
                    default=target_dir,
                    help='The directory to save PDFs to')

# Allow the user to specify a non-default URL
parser.add_argument('-u',
                    '--url',
                    action='store',
                    default=target_url,
                    help='The top-level URL to connect to')

# Allow the user to specify a timeout value
parser.add_argument('-t',
                    '--timeout',
                    action='store',
                    default=timeout,
                    help='The number of seconds to wait for a control to load')

cli = parser.parse_args()


#############################
# Download the audit reports
#############################

start_date = datetime.datetime.strptime(cli.start, '%Y-%m-%d')
end_date = datetime.datetime.strptime(cli.end, '%Y-%m-%d')

states = ODNR.State.get_all()

    
s = ODNR.State.find_by_abbrev('OR')
ODNR.FAC.fetch_audits(cli.url, s, start_date, end_date, cli.quiet, cli.timeout, cli.dir)
